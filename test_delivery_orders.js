const { DonDatHang, NhanVien, KhachHang, TrangThaiDH, NhanVien_BoPhan } = require('./src/models');
const sequelize = require('./src/models/sequelize');
const { Op } = require('sequelize');

async function testDeliveryOrders() {
  try {
    console.log('üîç Ki·ªÉm tra d·ªØ li·ªáu ƒë∆°n h√†ng giao h√†ng...\n');

    // 1. Ki·ªÉm tra nh√¢n vi√™n giao h√†ng
    console.log('üìã 1. Ki·ªÉm tra nh√¢n vi√™n giao h√†ng:');
    const deliveryStaff = await NhanVien.findAll({
      include: [{
        model: NhanVien_BoPhan,
        where: {
          MaBoPhan: 11, // B·ªô ph·∫≠n giao h√†ng
          TrangThai: 'DANGLAMVIEC'
        }
      }]
    });

    console.log(`‚úÖ T√¨m th·∫•y ${deliveryStaff.length} nh√¢n vi√™n giao h√†ng:`);
    deliveryStaff.forEach(staff => {
      console.log(`   - MaNV: ${staff.MaNV}, TenNV: ${staff.TenNV}`);
    });

    // 2. Ki·ªÉm tra ƒë∆°n h√†ng c√≥ MaNV_Giao
    console.log('\nüì¶ 2. Ki·ªÉm tra ƒë∆°n h√†ng ƒë∆∞·ª£c ph√¢n c√¥ng:');
    const assignedOrders = await DonDatHang.findAll({
      where: {
        MaNV_Giao: { [Op.ne]: null }
      },
      include: [
        { model: KhachHang, attributes: ['MaKH', 'TenKH'] },
        { model: TrangThaiDH, attributes: ['MaTTDH', 'TrangThai'] },
        { model: NhanVien, as: 'NguoiGiao', attributes: ['MaNV', 'TenNV'] }
      ]
    });

    console.log(`‚úÖ T√¨m th·∫•y ${assignedOrders.length} ƒë∆°n h√†ng ƒë∆∞·ª£c ph√¢n c√¥ng:`);
    assignedOrders.forEach(order => {
      console.log(`   - MaDDH: ${order.MaDDH}, Kh√°ch h√†ng: ${order.KhachHang?.TenKH}, Tr·∫°ng th√°i: ${order.TrangThaiDH?.TrangThai}, NV giao: ${order.NguoiGiao?.TenNV}`);
    });

    // 3. Ki·ªÉm tra ƒë∆°n h√†ng c·ªßa nh√¢n vi√™n MaTK: 21
    console.log('\nüë§ 3. Ki·ªÉm tra ƒë∆°n h√†ng c·ªßa nh√¢n vi√™n MaTK: 21:');
    const ordersForStaff21 = await DonDatHang.findAll({
      where: {
        MaNV_Giao: 21
      },
      include: [
        { model: KhachHang, attributes: ['MaKH', 'TenKH'] },
        { model: TrangThaiDH, attributes: ['MaTTDH', 'TrangThai'] }
      ]
    });

    console.log(`‚úÖ Nh√¢n vi√™n MaTK: 21 c√≥ ${ordersForStaff21.length} ƒë∆°n h√†ng ƒë∆∞·ª£c ph√¢n c√¥ng:`);
    ordersForStaff21.forEach(order => {
      console.log(`   - MaDDH: ${order.MaDDH}, Kh√°ch h√†ng: ${order.KhachHang?.TenKH}, Tr·∫°ng th√°i: ${order.TrangThaiDH?.TrangThai}`);
    });

    // 4. Ki·ªÉm tra ƒë∆°n h√†ng c√≥ th·ªÉ ph√¢n c√¥ng (tr·∫°ng th√°i ƒë√£ duy·ªát)
    console.log('\nüìã 4. Ki·ªÉm tra ƒë∆°n h√†ng c√≥ th·ªÉ ph√¢n c√¥ng (tr·∫°ng th√°i ƒë√£ duy·ªát):');
    const availableOrders = await DonDatHang.findAll({
      where: {
        MaTTDH: 2, // ƒê√£ duy·ªát
        MaNV_Giao: null // Ch∆∞a ph√¢n c√¥ng
      },
      include: [
        { model: KhachHang, attributes: ['MaKH', 'TenKH'] },
        { model: TrangThaiDH, attributes: ['MaTTDH', 'TrangThai'] }
      ],
      limit: 5
    });

    console.log(`‚úÖ T√¨m th·∫•y ${availableOrders.length} ƒë∆°n h√†ng c√≥ th·ªÉ ph√¢n c√¥ng:`);
    availableOrders.forEach(order => {
      console.log(`   - MaDDH: ${order.MaDDH}, Kh√°ch h√†ng: ${order.KhachHang?.TenKH}, Tr·∫°ng th√°i: ${order.TrangThaiDH?.TrangThai}`);
    });

    // 5. Ki·ªÉm tra ƒë∆°n h√†ng ƒëang giao (status = 3)
    console.log('\nüöö 5. Ki·ªÉm tra ƒë∆°n h√†ng ƒëang giao (status = 3):');
    const deliveringOrders = await DonDatHang.findAll({
      where: {
        MaTTDH: 3 // ƒêang giao h√†ng
      },
      include: [
        { model: KhachHang, attributes: ['MaKH', 'TenKH', 'SDT', 'DiaChi'] },
        { model: TrangThaiDH, attributes: ['MaTTDH', 'TrangThai'] },
        { model: NhanVien, as: 'NguoiGiao', attributes: ['MaNV', 'TenNV'] },
        { model: NhanVien, as: 'NguoiDuyet', attributes: ['MaNV', 'TenNV'] }
      ]
    });

    console.log(`‚úÖ T√¨m th·∫•y ${deliveringOrders.length} ƒë∆°n h√†ng ƒëang giao:`);
    deliveringOrders.forEach(order => {
      console.log(`   - MaDDH: ${order.MaDDH}`);
      console.log(`     Kh√°ch h√†ng: ${order.KhachHang?.TenKH} (${order.KhachHang?.SDT})`);
      console.log(`     ƒê·ªãa ch·ªâ: ${order.DiaChiGiao || order.KhachHang?.DiaChi}`);
      console.log(`     Tr·∫°ng th√°i: ${order.TrangThaiDH?.TrangThai}`);
      console.log(`     NV giao: ${order.NguoiGiao?.TenNV} (MaNV: ${order.NguoiGiao?.MaNV})`);
      console.log(`     NV duy·ªát: ${order.NguoiDuyet?.TenNV}`);
      console.log(`     Th·ªùi gian giao: ${order.ThoiGianGiao}`);
      console.log('');
    });

    // 6. T·∫°o d·ªØ li·ªáu m·∫´u n·∫øu c·∫ßn
    if (ordersForStaff21.length === 0 && availableOrders.length > 0 && deliveryStaff.length > 0) {
      console.log('\nüîÑ 6. T·∫°o d·ªØ li·ªáu m·∫´u...');
      
      // Ph√¢n c√¥ng ƒë∆°n h√†ng ƒë·∫ßu ti√™n cho nh√¢n vi√™n MaTK: 21
      const orderToAssign = availableOrders[0];
      const staff21 = deliveryStaff.find(staff => staff.MaNV === 21);
      
      if (orderToAssign && staff21) {
        await orderToAssign.update({
          MaNV_Giao: 21,
          MaTTDH: 3, // ƒêang giao h√†ng
          ThoiGianGiao: new Date()
        });
        
        console.log(`‚úÖ ƒê√£ ph√¢n c√¥ng ƒë∆°n h√†ng ${orderToAssign.MaDDH} cho nh√¢n vi√™n ${staff21.TenNV}`);
        
        // Ki·ªÉm tra l·∫°i
        const newOrdersForStaff21 = await DonDatHang.findAll({
          where: { MaNV_Giao: 21 },
          include: [
            { model: KhachHang, attributes: ['MaKH', 'TenKH'] },
            { model: TrangThaiDH, attributes: ['MaTTDH', 'TrangThai'] }
          ]
        });
        
        console.log(`‚úÖ B√¢y gi·ªù nh√¢n vi√™n MaTK: 21 c√≥ ${newOrdersForStaff21.length} ƒë∆°n h√†ng ƒë∆∞·ª£c ph√¢n c√¥ng`);
      }
    }

    console.log('\n‚úÖ Ho√†n th√†nh ki·ªÉm tra!');

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  } finally {
    await sequelize.close();
  }
}

testDeliveryOrders(); 