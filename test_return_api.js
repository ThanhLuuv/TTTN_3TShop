const axios = require('axios');

const BASE_URL = 'http://localhost:8080/api'; // S·ª≠a t·ª´ 3000 th√†nh 8080

// Test data
const testData = {
  customerToken: '', // C·∫ßn token c·ªßa kh√°ch h√†ng
  employeeToken: '', // C·∫ßn token c·ªßa nh√¢n vi√™n
  orderId: 1, // ID ƒë∆°n h√†ng ƒë√£ ho√†n t·∫•t
  returnReason: 'S·∫£n ph·∫©m kh√¥ng ƒë√∫ng nh∆∞ m√¥ t·∫£'
};

// Helper function ƒë·ªÉ set authorization header
const getAuthHeaders = (token) => ({
  'Authorization': `Bearer ${token}`,
  'Content-Type': 'application/json'
});

// Test API tr·∫£ h√†ng
const testReturnAPI = async () => {
  console.log('=== TESTING RETURN API ===\n');

  try {
    // 1. Test kh√°ch h√†ng y√™u c·∫ßu tr·∫£ h√†ng
    console.log('1. Testing customer return request...');
    const returnRequest = await axios.post(`${BASE_URL}/tra-hang/request`, {
      maDDH: testData.orderId,
      lyDo: testData.returnReason
    }, {
      headers: getAuthHeaders(testData.customerToken)
    });
    console.log('‚úÖ Return request successful:', returnRequest.data);
    console.log('');

    // 2. Test l·∫•y danh s√°ch y√™u c·∫ßu tr·∫£ h√†ng (nh√¢n vi√™n)
    console.log('2. Testing get return requests...');
    const returnRequests = await axios.get(`${BASE_URL}/tra-hang/requests?page=1&limit=10`, {
      headers: getAuthHeaders(testData.employeeToken)
    });
    console.log('‚úÖ Get return requests successful:', returnRequests.data);
    console.log('');

    // 3. Test t·∫°o phi·∫øu tr·∫£ h√†ng
    console.log('3. Testing create return slip...');
    const returnSlip = await axios.post(`${BASE_URL}/tra-hang/slip`, {
      maDDH: testData.orderId,
      danhSachSanPham: [
        {
          maCTDDH: 1,
          soLuongTra: 1
        }
      ],
      lyDo: testData.returnReason
    }, {
      headers: getAuthHeaders(testData.employeeToken)
    });
    console.log('‚úÖ Create return slip successful:', returnSlip.data);
    const returnSlipId = returnSlip.data.data.MaPhieuTra;
    console.log('');

    // 4. Test t·∫°o phi·∫øu chi
    console.log('4. Testing create payment slip...');
    const paymentSlip = await axios.post(`${BASE_URL}/tra-hang/payment`, {
      maPhieuTra: returnSlipId,
      soTien: 100000,
      phuongThucChi: 'Ti·ªÅn m·∫∑t',
      ghiChu: 'Ho√†n ti·ªÅn tr·∫£ h√†ng'
    }, {
      headers: getAuthHeaders(testData.employeeToken)
    });
    console.log('‚úÖ Create payment slip successful:', paymentSlip.data);
    console.log('');

    // 5. Test l·∫•y chi ti·∫øt phi·∫øu tr·∫£ h√†ng
    console.log('5. Testing get return slip detail...');
    const returnSlipDetail = await axios.get(`${BASE_URL}/tra-hang/slip/${returnSlipId}`, {
      headers: getAuthHeaders(testData.employeeToken)
    });
    console.log('‚úÖ Get return slip detail successful:', returnSlipDetail.data);
    console.log('');

    // 6. Test l·∫•y l·ªãch s·ª≠ tr·∫£ h√†ng c·ªßa kh√°ch h√†ng
    console.log('6. Testing get customer return history...');
    const customerHistory = await axios.get(`${BASE_URL}/tra-hang/history?page=1&limit=10`, {
      headers: getAuthHeaders(testData.customerToken)
    });
    console.log('‚úÖ Get customer return history successful:', customerHistory.data);
    console.log('');

    // 7. Test l·∫•y danh s√°ch phi·∫øu tr·∫£ h√†ng
    console.log('7. Testing get return slips...');
    const returnSlips = await axios.get(`${BASE_URL}/tra-hang/slips?page=1&limit=10`, {
      headers: getAuthHeaders(testData.employeeToken)
    });
    console.log('‚úÖ Get return slips successful:', returnSlips.data);

  } catch (error) {
    console.error('‚ùå Test failed:', error.response?.data || error.message);
  }
};

// Test c√°c tr∆∞·ªùng h·ª£p l·ªói
const testErrorCases = async () => {
  console.log('\n=== TESTING ERROR CASES ===\n');

  try {
    // Test kh√¥ng c√≥ token
    console.log('1. Testing without token...');
    await axios.post(`${BASE_URL}/tra-hang/request`, {
      maDDH: testData.orderId,
      lyDo: testData.returnReason
    });
  } catch (error) {
    console.log('‚úÖ No token error:', error.response?.status, error.response?.data?.message);
  }

  try {
    // Test ƒë∆°n h√†ng kh√¥ng t·ªìn t·∫°i
    console.log('2. Testing non-existent order...');
    await axios.post(`${BASE_URL}/tra-hang/request`, {
      maDDH: 99999,
      lyDo: testData.returnReason
    }, {
      headers: getAuthHeaders(testData.customerToken)
    });
  } catch (error) {
    console.log('‚úÖ Non-existent order error:', error.response?.status, error.response?.data?.message);
  }

  try {
    // Test thi·∫øu th√¥ng tin
    console.log('3. Testing missing required fields...');
    await axios.post(`${BASE_URL}/tra-hang/request`, {
      maDDH: testData.orderId
      // Thi·∫øu lyDo
    }, {
      headers: getAuthHeaders(testData.customerToken)
    });
  } catch (error) {
    console.log('‚úÖ Missing fields error:', error.response?.status, error.response?.data?.message);
  }
};

// Ch·∫°y test
const runTests = async () => {
  console.log('üöÄ Starting Return API Tests...\n');

  // C·∫ßn c·∫≠p nh·∫≠t token tr∆∞·ªõc khi ch·∫°y test
  if (!testData.customerToken || !testData.employeeToken) {
    console.log('‚ö†Ô∏è  Please update customerToken and employeeToken in testData before running tests');
    return;
  }

  await testReturnAPI();
  await testErrorCases();

  console.log('\n‚úÖ All tests completed!');
};

// Export cho vi·ªác s·ª≠ d·ª•ng trong c√°c file test kh√°c
module.exports = {
  testReturnAPI,
  testErrorCases,
  runTests
};

// Ch·∫°y test n·∫øu file ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  runTests();
}
